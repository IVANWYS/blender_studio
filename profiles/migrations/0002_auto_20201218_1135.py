# Generated by Django 3.0.9 on 2020-12-18 10:35

import common.upload_paths
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def add_can_view_content_permission_to_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Profile = apps.get_model('profiles', 'Profile')
    content_type = ContentType.objects.get_for_model(Profile)
    # permissions are created in a `post_migrate` signal and won't be available until the **next** ./manage.py migrate,
    # causing __fake__.DoesNotExist: Permission matching query does not exist
    permission, _ = Permission.objects.get_or_create(
        codename='can_view_content',
        content_type=content_type,
        name='Can view subscription-only content',
    )
    # Add this permission to the groups that are currently interpreted as having active subscription status
    for group_name in ('demo', 'subscriber'):
        # Create these groups, so that tests and newly setup dev environments worked as expected
        group, _ = Group.objects.get_or_create(name=group_name)
        group.permissions.add(permission)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('profiles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0001_initial'),
        ('actstream', '0003_add_follow_flag'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('full_name', models.CharField(blank=True, default='', max_length=255)),
                ('image', models.ImageField(blank=True, null=True, upload_to=common.upload_paths.get_upload_to_hashed_path)),
                ('is_subscribed_to_newsletter', models.BooleanField(default=False)),
            ],
            options={
                'permissions': [('can_view_content', 'Can view subscription-only content')],
            },
        ),
        migrations.AddField(
            model_name='notification',
            name='action',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='actstream.Action'),
        ),
        migrations.AddField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL),
        ),
        # FIXME(anna): because this table is en external dependency,
        # there's no other way to enforce this contraint
        # Addin OAuthUserInfo._meta.get_field('oauth_user_id')._unique = True
        # would generate a migration inside `blender_id_oauth_client`
        migrations.RunSQL(
            # Generated with sqlmigrate from an automatic migration that was removed right after
            # e.g. if blender_id_oauth_client migration number is NNNN
            sql=[
                # ./manage.py sqlmigrate blender_id_oauth_client NNNN
                'ALTER TABLE "blender_id_oauth_client_oauthuserinfo" '
                'ADD CONSTRAINT "blender_id_oauth_client__oauth_user_id_b1e52371_uniq" '
                'UNIQUE ("oauth_user_id");',
                'CREATE INDEX "blender_id_oauth_client__oauth_user_id_b1e52371_like" '
                'ON "blender_id_oauth_client_oauthuserinfo" ("oauth_user_id" varchar_pattern_ops);',
            ],
            reverse_sql=[
                # ./manage.py sqlmigrate blender_id_oauth_client NNNN --backwards
                'DROP INDEX IF EXISTS "blender_id_oauth_client__oauth_user_id_b1e52371_like";',
                'ALTER TABLE "blender_id_oauth_client_oauthuserinfo" '
                'DROP CONSTRAINT IF EXISTS "blender_id_oauth_client__oauth_user_id_b1e52371_uniq";',
            ],
        ),
        migrations.RunPython(add_can_view_content_permission_to_groups),
    ]
