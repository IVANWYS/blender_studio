# Generated by Django 3.0.14 on 2021-11-26 16:22

from django.db import migrations, models
import django.contrib.postgres.fields
import django.db.models.deletion
import subscriptions.validators

description_automatic = 'This subscription is renewed automatically. You can stop or cancel a subscription any time.'
description_manual = 'This subscription is renewed manually. You can leave it on-hold, or renew it when convenient.'

single_seat_eur = 600
single_seat_usd = 700
unlimited_seat_multiplier = 30
seat_limit = 15
manual_multiplier = 1
plan_variations = [
    # Method, int unit, int length, currency, price, is default for currency
    (
        f'Automatic renewal, {seat_limit} seats', description_automatic, 'automatic', seat_limit,
        ('month', 1, 'USD', seat_limit * single_seat_usd, True),
        ('month', 1, 'EUR', seat_limit * single_seat_eur, True),
        ('month', 3, 'USD', 3 * seat_limit * single_seat_usd, False),
        ('month', 3, 'EUR', 3 * seat_limit * single_seat_eur, False),
        ('month', 6, 'USD', 6 * seat_limit * single_seat_usd, False),
        ('month', 6, 'EUR', 6 * seat_limit * single_seat_eur, False),
        ('year', 1, 'USD', 12 * seat_limit * single_seat_usd, False),
        ('year', 1, 'EUR', 12 * seat_limit * single_seat_eur, False),
    ),
    (
        f'Manual renewal, {seat_limit} seats', description_manual, 'manual', seat_limit,
        ('month', 1, 'USD', manual_multiplier * seat_limit * single_seat_usd, False),
        ('month', 1, 'EUR', manual_multiplier * seat_limit * single_seat_eur, False),
        ('month', 3, 'USD', 3 * manual_multiplier * seat_limit * single_seat_usd, False),
        ('month', 3, 'EUR', 3 * manual_multiplier * seat_limit * single_seat_eur, False),
        ('year', 1, 'USD', 12 * manual_multiplier * seat_limit * single_seat_usd, False),
        ('year', 1, 'EUR', 12 * manual_multiplier * seat_limit * single_seat_eur, False),
    ),
    (
        'Automatic renewal, unlimited seats', description_automatic, 'automatic', None,
        ('month', 1, 'USD', unlimited_seat_multiplier * single_seat_usd, True),
        ('month', 1, 'EUR', unlimited_seat_multiplier * single_seat_eur, True),
        ('month', 3, 'USD', 3 * unlimited_seat_multiplier * single_seat_usd, False),
        ('month', 3, 'EUR', 3 * unlimited_seat_multiplier * single_seat_eur, False),
        ('month', 6, 'USD', 6 * unlimited_seat_multiplier * single_seat_usd, False),
        ('month', 6, 'EUR', 6 * unlimited_seat_multiplier * single_seat_eur, False),
        ('year', 1, 'USD', 12 * unlimited_seat_multiplier * single_seat_usd, False),
        ('year', 1, 'EUR', 12 * unlimited_seat_multiplier * single_seat_eur, False),
    ),
    (
        'Manual renewal, unlimited seats', description_manual, 'manual', None,
        ('month', 1, 'USD', manual_multiplier * unlimited_seat_multiplier * single_seat_usd, False),
        ('month', 1, 'EUR', manual_multiplier * unlimited_seat_multiplier * single_seat_eur, False),
        ('month', 3, 'USD', 3 * manual_multiplier * unlimited_seat_multiplier * single_seat_usd, False),
        ('month', 3, 'EUR', 3 * manual_multiplier * unlimited_seat_multiplier * single_seat_eur, False),
        ('year', 1, 'USD', 12 * manual_multiplier * unlimited_seat_multiplier * single_seat_usd, False),
        ('year', 1, 'EUR', 12 * manual_multiplier * unlimited_seat_multiplier * single_seat_eur, False),
    ),
]


def add_team_plans(apps, schema_editor):
    from looper.taxes import ProductType
    Product = apps.get_model('looper', 'Product')
    Plan = apps.get_model('looper', 'Plan')
    PlanVariation = apps.get_model('looper', 'PlanVariation')
    TeamPlanProperties = apps.get_model('subscriptions', 'TeamPlanProperties')
    product, _ = Product.objects.get_or_create(
        name='Blender Studio Team Subscription',
        type=ProductType.ELECTRONIC_SERVICE.value
    )
    for params in plan_variations:
        name, description, method, seats = params[:4]
        plan, _ = Plan.objects.get_or_create(
            product=product,
            name=name,
            description=description,
            is_active=True,
        )
        plan_properties, _ = TeamPlanProperties.objects.get_or_create(
            # create a plan with unlimited seats, can be modified later
            seats=seats,
            plan=plan,
        )
        for (
            interval_unit, interval_length, currency, price, is_default_for_currency
        ) in params[4:]:
            variation, _ = PlanVariation.objects.get_or_create(
                plan=plan,
                currency=currency,
                price=round(price),
                collection_method=method,
                interval_unit=interval_unit,
                interval_length=interval_length,
                is_default_for_currency=is_default_for_currency,
                is_active=True,
            )


class Migration(migrations.Migration):

    dependencies = [
        ('looper', '0076_order_external_reference'),
        ('subscriptions', '0004_create_customers'),
    ]

    operations = [
        migrations.CreateModel(
            name='TeamPlanProperties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('seats', models.IntegerField(blank=True, null=True)),
                ('plan', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='team_properties', to='looper.Plan')),
            ],
            options={
                'verbose_name': 'Team Plan Properties',
                'verbose_name_plural': 'Team Plan Properties',
            },
        ),
        migrations.AddField(
            model_name='team',
            name='email_domain',
            field=models.CharField(blank=True, help_text='Team email domain. If set to "my-awesome-team.org", everyone with an email ending with "@my-awesome-team.org" will be considered a member of this team. Domains of common email providers are not allowed.', max_length=253, null=True, validators=[subscriptions.validators.validate_email_domain]),
        ),
        migrations.AddField(
            model_name='team',
            name='emails',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, default=list, help_text="Comma-separated list of team members' emails.", null=True, size=None),
        ),
        migrations.AddField(
            model_name='team',
            name='invoice_reference',
            field=models.CharField(blank=True, max_length=64, null=True, validators=[subscriptions.validators.validate_invoice_reference], help_text='Invoice reference, such as purchase order number. Included into newly generated invoices (changing this will not affect existing invoices).'),
        ),
        migrations.AddField(
            model_name='team',
            name='seats',
            field=models.IntegerField(blank=True, help_text='If set, limits the size of the team to this number', null=True),
        ),
        migrations.AlterField(
            model_name='team',
            name='name',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.DeleteModel(
            name='SubscriptionProperties',
        ),
        migrations.RunPython(add_team_plans, reverse_code=migrations.RunPython.noop),
    ]
